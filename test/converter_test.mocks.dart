// Mocks generated by Mockito 5.4.2 from annotations
// in markdownr/test/converter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:markdownr/httpclient.dart' as _i3;
import 'package:markdownr/notifications.dart' as _i6;
import 'package:markdownr/readability.dart' as _i2;
import 'package:markdownr/settings.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReadabilityOutput_0 extends _i1.SmartFake
    implements _i2.ReadabilityOutput {
  _FakeReadabilityOutput_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i3.HttpClient {
  @override
  _i4.Future<String> getPage(String? url) => (super.noSuchMethod(
        Invocation.method(
          #getPage,
          [url],
        ),
        returnValue: _i4.Future<String>.value(''),
        returnValueForMissingStub: _i4.Future<String>.value(''),
      ) as _i4.Future<String>);
}

/// A class which mocks [SettingsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsRepository extends _i1.Mock
    implements _i5.SettingsRepository {
  @override
  bool getBool(
    String? name, {
    bool? defaultValue = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [name],
          {#defaultValue: defaultValue},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Future<void> setBool(
    String? name,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            name,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i6.NotificationService {
  @override
  dynamic showToast(String? message) => super.noSuchMethod(
        Invocation.method(
          #showToast,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ReadabilityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockReadabilityService extends _i1.Mock
    implements _i2.ReadabilityService {
  @override
  _i4.Future<_i2.ReadabilityOutput> makeReadable(
    String? html,
    String? url,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #makeReadable,
          [
            html,
            url,
          ],
        ),
        returnValue:
            _i4.Future<_i2.ReadabilityOutput>.value(_FakeReadabilityOutput_0(
          this,
          Invocation.method(
            #makeReadable,
            [
              html,
              url,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.ReadabilityOutput>.value(_FakeReadabilityOutput_0(
          this,
          Invocation.method(
            #makeReadable,
            [
              html,
              url,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ReadabilityOutput>);
}
